package com.example.lrjgreendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lrjgreendaodemo.Score;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCORE".
*/
public class ScoreDao extends AbstractDao<Score, Void> {

    public static final String TABLENAME = "SCORE";

    /**
     * Properties of entity Score.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sno = new Property(0, long.class, "sno", false, "SNO");
        public final static Property Cno = new Property(1, long.class, "cno", false, "CNO");
        public final static Property Score = new Property(2, int.class, "score", false, "SCORE");
    }


    public ScoreDao(DaoConfig config) {
        super(config);
    }
    
    public ScoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCORE\" (" + //
                "\"SNO\" INTEGER NOT NULL ," + // 0: sno
                "\"CNO\" INTEGER NOT NULL ," + // 1: cno
                "\"SCORE\" INTEGER NOT NULL );"); // 2: score
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCORE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Score entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSno());
        stmt.bindLong(2, entity.getCno());
        stmt.bindLong(3, entity.getScore());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Score entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSno());
        stmt.bindLong(2, entity.getCno());
        stmt.bindLong(3, entity.getScore());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Score readEntity(Cursor cursor, int offset) {
        Score entity = new Score( //
            cursor.getLong(offset + 0), // sno
            cursor.getLong(offset + 1), // cno
            cursor.getInt(offset + 2) // score
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Score entity, int offset) {
        entity.setSno(cursor.getLong(offset + 0));
        entity.setCno(cursor.getLong(offset + 1));
        entity.setScore(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Score entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Score entity) {
        return null;
    }

    @Override
    public boolean hasKey(Score entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
